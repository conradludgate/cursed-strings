var searchIndex = JSON.parse('{\
"cursed_strings":{"doc":"The one and only string type in Rust","t":[6,6,5,5,5,5,11,11,6,0,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["ArrayString","String","from_utf8","from_utf8_mut","from_utf8_unchecked","from_utf8_unchecked_mut","new","new","str","string_base","with_alloc","with_capacity","FromUtf8Error","StringBase","as_bytes","as_bytes_mut","as_mut","as_mut","as_mut_ptr","as_mut_str","as_mut_vec","as_ptr","as_ref","as_ref","as_str","borrow","borrow","borrow","borrow_mut","borrow_mut","bytes","capacity","char_indices","chars","clear","clone","clone_into","cmp","default","deref","deref_mut","eq","eq","eq","eq_ignore_ascii_case","fmt","fmt","fmt","from","from","from","from","from","from","from_utf8","from_utf8_unchecked","get","get_mut","get_unchecked","get_unchecked_mut","index","index_mut","insert","insert_str","into","into","into_bytes","is_ascii","is_char_boundary","is_empty","len","make_ascii_lowercase","make_ascii_uppercase","ne","ne","ne","new","new","new_with_capacity","partial_cmp","pop","push","push_str","remove","reserve","split_at","split_at_mut","split_off","to_owned","to_owned","to_string","truncate","try_from","try_from","try_into","try_into","try_reserve","type_id","type_id","with_alloc","with_capacity","with_storage"],"q":["cursed_strings","","","","","","","","","","","","cursed_strings::string_base","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Same API as <code>String</code> but without any re-allocation. Can …","Exactly the same as <code>std::string::String</code>, except generic","Converts a slice of bytes to a string slice.","Converts a mutable slice of bytes to a mutable string …","Converts a slice of bytes to a string slice without …","Converts a slice of bytes to a string slice without …","Creates a new empty <code>String</code>.","Creates a new empty <code>ArrayString</code>.","Exactly the same as <code>std::str</code>, except generic","","","Creates a new empty <code>String</code> with a particular capacity.","","","Converts a string slice to a byte slice. To convert the …","Converts a mutable string slice to a mutable byte slice.","","","Converts a mutable string slice to a raw pointer.","Converts a <code>String</code> into a mutable string slice.","Returns a mutable reference to the contents of this <code>String</code>…","Converts a string slice to a raw pointer.","","","Extracts a string slice containing the entire <code>String</code>.","","","","","","An iterator over the bytes of a string slice.","Returns this <code>String</code>’s capacity, in bytes.","","Returns an iterator over the <code>char</code>s of a string slice.","Truncates this <code>String</code>, removing all contents.","","","","","","","","","","Checks that two strings are an ASCII case-insensitive …","","","","","","","","","","Converts a vector of bytes to a <code>String</code>.","Converts a vector of bytes to a <code>String</code> without checking …","Returns a subslice of <code>str</code>.","Returns a mutable subslice of <code>str</code>.","Returns an unchecked subslice of <code>str</code>.","Returns a mutable, unchecked subslice of <code>str</code>.","","","Inserts a character into this <code>String</code> at a byte position.","Inserts a string slice into this <code>String</code> at a byte …","","","Converts a <code>String</code> into a byte vector.","Checks if all characters in this string are within the …","Checks that <code>index</code>-th byte is the first byte in a UTF-8 …","Returns <code>true</code> if <code>self</code> has a length of zero bytes.","Returns the length of <code>self</code>.","Converts this string to its ASCII lower case equivalent …","Converts this string to its ASCII upper case equivalent …","","","","Creates a new empty <code>ArrayString</code>.","Creates a new empty <code>String</code>.","","","Removes the last character from the string buffer and …","Appends the given <code>char</code> to the end of this <code>String</code>.","Appends a given string slice onto the end of this <code>String</code>.","Removes a <code>char</code> from this <code>String</code> at a byte position and …","Ensures that this <code>String</code>’s capacity is at least …","Divide one string slice into two at an index.","Divide one mutable string slice into two at an index.","Splits the string into two at the given byte index.","","","","Shortens this <code>String</code> to the specified length.","","","","","Tries to reserve capacity for at least <code>additional</code> more …","","","","Creates a new empty <code>String</code> with a particular capacity.","Creates a new empty <code>String</code> with a particular storage …"],"i":[0,0,0,0,0,0,1,2,0,0,1,1,0,0,3,3,3,3,3,3,3,3,3,3,3,3,3,4,3,4,3,3,3,3,3,3,3,3,3,3,3,3,3,4,3,3,3,4,3,3,3,3,3,4,3,3,3,3,3,3,3,3,3,3,3,4,3,3,3,3,3,3,3,3,3,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,3,4,3,3,4,3,3,3],"f":[null,null,[[],[["stringbase",3],["utf8error",3],["result",4,["stringbase","utf8error"]]]],[[],[["result",4,["stringbase","utf8error"]],["utf8error",3],["stringbase",3]]],[[],["stringbase",3]],[[],["stringbase",3]],[[]],[[]],null,null,[[]],[[["usize",15]]],null,null,[[]],[[]],[[],["str",15]],[[],["stringbase",3]],[[]],[[],["stringbase",3]],[[],["genericvec",3]],[[]],[[],["str",15]],[[],["stringbase",3]],[[],["stringbase",3]],[[],["stringbase",3]],[[]],[[]],[[]],[[]],[[],["bytes",3]],[[],["usize",15]],[[],["charindices",3]],[[],["chars",3]],[[]],[[],["stringbase",3]],[[]],[[["stringbase",3]],["ordering",4]],[[],["stringbase",3]],[[],["stringbase",3]],[[],["stringbase",3]],[[],["bool",15]],[[["stringbase",3]],["bool",15]],[[["fromutf8error",3]],["bool",15]],[[["stringbase",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["string",3]]],[[["str",15]]],[[["string",3]]],[[["str",15]]],[[]],[[]],[[["u8",15],["genericvec",3,["u8"]]],[["fromutf8error",3],["result",4,["fromutf8error"]]]],[[["u8",15],["genericvec",3,["u8"]]]],[[["sliceindex",8,["stringbase"]],["stringbase",3]],["option",4]],[[["sliceindex",8,["stringbase"]],["stringbase",3]],["option",4]],[[["sliceindex",8,["stringbase"]],["stringbase",3]]],[[["sliceindex",8,["stringbase"]],["stringbase",3]]],[[]],[[]],[[["usize",15],["char",15]]],[[["usize",15],["str",15]]],[[]],[[]],[[],[["u8",15],["genericvec",3,["u8"]]]],[[],["bool",15]],[[["usize",15]],["bool",15]],[[],["bool",15]],[[],["usize",15]],[[]],[[]],[[],["bool",15]],[[["stringbase",3]],["bool",15]],[[["fromutf8error",3]],["bool",15]],[[]],[[]],[[["usize",15]]],[[["stringbase",3]],[["option",4,["ordering"]],["ordering",4]]],[[],[["option",4,["char"]],["char",15]]],[[["char",15]]],[[["stringbase",3]]],[[["usize",15]],["char",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]],[["stringbase",3,["genericvec"]],["genericvec",3,["u8"]]]],[[]],[[]],[[],["string",3]],[[["usize",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["usize",15]],["bool",15]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[["usize",15]]],[[]]],"p":[[6,"String"],[6,"ArrayString"],[3,"StringBase"],[3,"FromUtf8Error"]]},\
"generic_vec":{"doc":"A vector that can store items anywhere: in slices, …","t":[6,14,3,6,6,14,6,18,18,6,6,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,11,11,11,11,11,11,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,18,18,8,8,8,18,3,3,3,10,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,10,11,11,11],"n":["ArrayVec","ArrayVec","GenericVec","HeapVec","InitArrayVec","InitArrayVec","InitSliceVec","NEW","NEW","SliceVec","TypeVec","ZSVec","append","as_mut","as_mut_ptr","as_mut_slice","as_ptr","as_ref","as_slice","borrow","borrow","borrow_mut","borrow_mut","capacity","clear","clone","clone_from","clone_from","clone_into","cmp","convert","cursor","dedup","dedup_by","dedup_by_key","default","deref","deref_mut","drain","drain_filter","drop","eq","extend","extend","extend_from_slice","extend_from_slice_unchecked","fmt","from","from","from","from","from_array","from_array","from_iter","from_raw_parts","grow","grow_with","gvec","hash","index","index_mut","insert","insert_array","insert_array_unchecked","insert_unchecked","into","into_array","into_array","into_iter","into_raw_parts","is_empty","is_full","iter","len","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","partial_cmp","pop","pop_array","pop_array_unchecked","pop_unchecked","push","push_array","push_array_unchecked","push_unchecked","raw","raw_cursor","remaining_capacity","remove","remove_array","remove_array_unchecked","remove_unchecked","reserve","resize","resize_with","retain","save_spare","set_len","set_len_unchecked","spare_capacity_mut","splice","split_off","split_off_into","storage","storage_mut","swap_remove","swap_remove_unchecked","to_owned","truncate","try_from","try_insert","try_insert_array","try_into","try_pop","try_pop_array","try_push","try_push_array","try_remove","try_remove_array","try_reserve","try_swap_remove","type_id","uninit_array","with_align","with_align","with_alloc","with_alloc","with_capacity","with_storage","Cursor","Drain","DrainFilter","IntoIter","RawCursor","Splice","as_mut_slice","as_raw_cursor_mut","as_slice","back","back","back_mut","back_mut","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","count","drop","drop","drop","drop","drop","drop_back","drop_back","drop_front","drop_front","drop_n_back","drop_n_back","drop_n_front","drop_n_front","finish","from","from","from","from","from","from","front","front","front_mut","front_mut","into","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","is_empty","is_empty","is_empty","is_empty","is_write_back_empty","is_write_back_empty","is_write_empty","is_write_empty","is_write_front_empty","is_write_front_empty","len","len","next","next","next","next","next_back","next_back","next_back","next_back","nth","reserve","reserve","size_hint","size_hint","size_hint","size_hint","skip_back","skip_back","skip_front","skip_front","skip_n_back","skip_n_back","skip_n_front","skip_n_front","take_back","take_back","take_front","take_front","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_write_back","try_write_front","type_id","type_id","type_id","type_id","type_id","type_id","write_back","write_back","write_back_len","write_back_len","write_front","write_front","write_front_len","write_front_len","write_len","write_len","write_slice_back","write_slice_back","write_slice_front","write_slice_front","Heap","IS_ALIGNED","NEW","Storage","StorageInit","StorageWithCapacity","TRY_NEW","UninitBuffer","UninitSlice","ZeroSized","as_mut_ptr","as_mut_ptr","as_mut_ptr","as_mut_ptr","as_mut_ptr","as_ptr","as_ptr","as_ptr","as_ptr","as_ptr","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","capacity","capacity","capacity","capacity","capacity","clone","clone","clone_into","clone_into","default","default","default","drop","from","from","from","from_mut","from_raw_parts","from_raw_parts_in","into","into","into","into_raw_parts","into_raw_parts_with_alloc","new","new","reserve","reserve","reserve","reserve","reserve","to_mut","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","try_reserve","try_reserve","try_reserve","try_reserve","try_reserve","type_id","type_id","type_id","type_id","uninit","with_alloc","with_capacity","with_capacity","with_capacity","with_capacity"],"q":["generic_vec","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","generic_vec::iter","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","generic_vec::raw","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["An array backed vector backed by potentially …","An array backed vector backed by potentially …","A vector type that can be backed up by a variety of …","A heap backed vector with a growable capacity","An array backed vector backed by initialized memory","An array backed vector backed by initialized memory","An slice backed vector backed by initialized memory","Create a new counter vector","Create a new counter vector","An slice backed vector backed by potentially …","An type based vector backed by uninitialized memory with …","A counter vector that can only store zero-sized types","Moves all the elements of <code>other</code> into <code>Self</code>, leaving <code>other</code> …","","Returns a unique raw pointer to the vector’s buffer.","Extracts a mutable slice containing the entire vector.","Returns a shared raw pointer to the vector’s buffer.","","Extracts a slice containing the entire vector.","","","","","Returns the number of elements the vector can hold …","Clears the vector, removing all values.","","Replaces all of the current elements with the ones in the …","","","","Convert the backing storage type, and moves all the …","Creates a cursor that can be used to remove elements in …","Removes all but the first of consecutive elements in the …","Removes all but the first of consecutive elements in the …","Removes all but the first of consecutive elements in the …","","","","Creates a draining iterator that removes the specified …","Creates an iterator which uses a closure to determine if …","","","","","Clones and appends all elements in a slice to the …","Shallow copies and appends all elements in a slice to the …","","","","","","Create a new full <code>ArrayVec</code>","Create a new full <code>ArrayVec</code>","","Create a <code>GenericVec</code> from a length-storage pair","Grows the <code>GenericVec</code> in-place by additional elements.","Grows the <code>GenericVec</code> in-place by additional elements.","Create a new generic vector","","","","Inserts an element at position index within the vector, …","Inserts the array at position index within the vector, …","Inserts an array at position index within the vector, …","Inserts an element at position index within the vector, …","","Convert this <code>ArrayVec</code> into an array","Convert this <code>ArrayVec</code> into an array","","Convert a <code>GenericVec</code> into a length-storage pair","Returns true if and only if the vector contains no …","Returns true if and only if the vector’s length is …","The <code>Iterator</code> types that can be created from a <code>GenericVec</code>","Returns the number of elements in the vector","Create a new empty <code>HeapVec</code>","Create a new empty <code>SliceVec</code>","Create a new empty <code>SliceVec</code>","Create a new full <code>InitArrayVec</code>","Create a new full <code>InitSliceVec</code>","Create a new full <code>InitSliceVec</code>","Create a new counter vector","Create a new <code>TypeVec</code>","Create a new full <code>InitArrayVec</code>","Create a new counter vector","Create a new <code>TypeVec</code>","Create a new empty <code>HeapVec</code>","Create a new empty <code>SliceVec</code>","Create a new empty <code>SliceVec</code>","Create a new full <code>InitSliceVec</code>","Create a new full <code>InitSliceVec</code>","","Removes the last element from a vector and returns it","Removes the last <code>N</code> elements from a vector and returns it","Removes the last <code>N</code> elements from a vector and returns it","Removes the last element from a vector and returns it","Appends an element to the back of a collection.","Appends the array to the back of a collection.","Appends the array to the back of a collection.","Appends an element to the back of a collection.","The raw vector typse that back-up the <code>GenericVec</code>","Creates a raw cursor that can be used to remove elements …","Returns the length of the spare capacity of the <code>GenericVec</code>","Removes and returns the element at position index within …","Removes and returns <code>N</code> elements at position index within …","Removes and returns the element at position index within …","Removes and returns the element at position index within …","Reserve enough space for at least <code>additional</code> elements","Resizes the <code>GenericVec</code> in-place so that <code>len</code> is equal to …","Resizes the <code>GenericVec</code> in-place so that len is equal to …","Retains only the elements specified by the predicate.","Save the changes to <code>GenericVec::spare_capacity_mut</code>","Set the length of a vector","Set the length of a vector","Returns the remaining spare capacity of the vector as a …","Creates a splicing iterator that replaces the specified …","Splits the collection into two at the given index.","Splits the collection into two at the given index.","Returns the underlying storage","Returns the underlying storage","Removes an element from the vector and returns it.","Removes an element from the vector and returns it.","","Shortens the vector, keeping the first len elements and …","","Inserts an element at position index within the vector, …","Inserts an array at position index within the vector, …","","Removes the last element from a vector and returns it, …","Removes the last <code>N</code> elements from a vector and returns it, …","Tries to append an element to the back of a collection. …","Tries to append an array to the back of a collection. …","Removes and returns the element at position index within …","Removes and returns the element at position index within …","Try to reserve enough space for at least <code>additional</code> …","Removes an element from the vector and returns it. …","","a helper macro to safely create an array of uninitialized …","Create a new <code>TypeVec</code> with the given alignment type","Create a new <code>TypeVec</code> with the given alignment type","Create a new empty <code>HeapVec</code> with the given allocator","Create a new empty <code>HeapVec</code> with the given allocator","Create a new empty <code>GenericVec</code> with the backend with at …","Create a new empty <code>GenericVec</code> with the given backend","This struct is created by <code>GenericVec::cursor</code>. See its …","This struct is created by <code>GenericVec::drain</code>. See its …","This struct is created by <code>GenericVec::drain_filter</code>. See …","This struct is created by <code>GenericVec::into_iter</code>. See its …","This struct is created by <code>GenericVec::raw_cursor</code>. See its …","This struct is created by <code>GenericVec::splice</code>. See its …","Get a mutable slice to the remaining elements in the …","Get a mutable reference to the underlying <code>RawCursor</code>","Get a slice to the remaining elements in the iterator","Returns a reference to the last element of the <code>Cursor</code>. …","Returns a reference to the last element of the <code>RawCursor</code>.","Returns a mutable reference to the last element of the …","Returns a mutable reference to the last element of the …","","","","","","","","","","","","","","","","","","","Drops the last element of the <code>Cursor</code> and removes them it …","Drops the last element of the <code>RawCursor</code> and removes them …","Drops the next element of the <code>Cursor</code> and removes them it …","Drops the next element of the <code>RawCursor</code> and removes them …","Drops the last <code>n</code> elements of the <code>Cursor</code> and removes them …","Drops the last <code>n</code> elements of the <code>RawCursor</code> and removes …","Drops the next <code>n</code> elements of the <code>Cursor</code> and removes them …","Drops the next <code>n</code> elements of the <code>RawCursor</code> and removes …","Skip all the remaining elements, and ensure that the …","","","","","","","Returns a reference to the next element of the <code>Cursor</code>. …","Returns a reference to the next element of the <code>RawCursor</code>.","Returns a mutable reference to the next element of the …","Returns a mutable reference to the next element of the …","","","","","","","","","","","Returns <code>true</code> if the <code>Cursor</code> is empty","","","Returns <code>true</code> if the <code>RawCursor</code> is empty","Returns true if there is an unfilled slot at the back of …","Returns true if there is an unfilled slot at the back of …","Returns <code>true</code> if the <code>Cursor</code> is has no unfilled slots and …","Returns <code>true</code> if the <code>RawCursor</code> is has no unfilled slots …","Returns true if there is an unfilled slot at the front of …","Returns true if there is an unfilled slot at the front of …","The number of remaining elements in range of this <code>Cursor</code>","The number of remaining elements in range of this …","","","","","","","","","","Reserve at least space unfilled slots in the <code>Cursor</code>","Reserve at least space unfilled slots in the <code>RawCursor</code>","","","","","Skips the last element of the <code>Cursor</code> and keeps it in the …","Skips the last element of the <code>RawCursor</code> and keeps it in …","Skips the next element of the <code>Cursor</code> and keeps it in the …","Skips the next element of the <code>RawCursor</code> and keeps it in …","Skips the last <code>n</code> elements of the <code>Cursor</code> and keeps them in …","Skips the last <code>n</code> elements of the <code>RawCursor</code> and keeps them …","Skips the next <code>n</code> elements of the <code>Cursor</code> and keeps them in …","Skips the next <code>n</code> elements of the <code>RawCursor</code> and keeps them …","Removes the last element of the …","Removes the last element of the …","Removes the next element of the <code>Cursor</code> and removes it …","Removes the next element of the <code>RawCursor</code> and removes it …","","","","","","","","","","","","","Returns <code>Ok(())</code> and writes <code>value</code> into the unfilled slot at …","Returns <code>Ok(())</code> and writes <code>value</code> into the unfilled slot at …","","","","","","","Writes <code>value</code> into the unfilled slot at the back of the …","Writes <code>value</code> into the unfilled slot at the back of the …","Returns the number of unfilled slots at the back of the …","Returns the number of unfilled slots at the back of the …","Writes <code>value</code> into the unfilled slot at the front of the …","Writes <code>value</code> into the unfilled slot at the front of the …","Returns the number of unfilled slots at the front of the …","Returns the number of unfilled slots at the front of the …","Returns the number of unfilled slots if the <code>Cursor</code> is …","Returns the number of unfilled slots if the <code>RawCursor</code> is …","Copies <code>slice</code> into the unfilled slots at the back of the …","Moves <code>slice</code> into the unfilled slots at the back of the …","Copies <code>slice</code> into the unfilled slots at the front of the …","Moves <code>slice</code> into the unfilled slots at the front of the …","A heap storage that can reallocate if necessary,","Is the pointer from <code>as_ptr</code> guaranteed to be aligned to <code>T</code>","Create a new zero-sized allocator, can only be used with …","A type that can hold <code>T</code>s, and potentially reserve space …","A <code>Storage</code> that can only contain initialized <code>Storage::Item</code>","A storage that can be initially created with a given …","Try to create a new zero-sized allocator, will be <code>None</code> if …","An uninitialized storage. This storage can store values …","An uninitialized slice storage","A storage that can hold zero sized types","Returns a mutable pointer to the first element","","","","","Returns a pointer to the first element","","","","","","","","","","","","","The number of elements that it is valid to write to this …","","","Get the capacity of this buffer for a given element type","","","","","","","","","","","","","","Create a new <code>UninitSlice</code> storage","Create a new <code>Heap&lt;T&gt;</code>storage from the given pointer and …","Create a new <code>Heap&lt;T&gt;</code>storage from the given pointer and …","","","","Convert a <code>Heap</code> storage into a pointer and capacity, …","Convert a <code>Heap</code> storage into a pointer and capacity, …","Create a new uninitialized array storage with the given …","Create a new zero-capacity heap vector","Reserves space for at least <code>new_capacity</code> elements","","","","","Get the backing value of the this <code>Uninit</code> storage","","","","","","","","","Tries to reserve space for at least <code>new_capacity</code> elements","","","","","","","","","Create a new uninitialized array storage","Create a new zero-capacity heap vector with the given …","Creates a new storage with at least the given storage …","","",""],"i":[0,0,0,0,0,0,0,1,2,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,4,5,2,4,2,2,2,2,2,0,2,2,2,2,2,2,2,2,4,2,2,2,2,2,0,2,3,6,6,5,7,7,1,8,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,2,2,2,2,2,2,2,2,2,2,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,0,8,2,3,2,2,2,0,0,0,0,0,0,9,10,9,10,11,10,11,10,12,13,9,11,14,10,12,13,9,11,14,9,12,13,9,11,14,10,11,10,11,10,11,10,11,11,10,12,13,9,11,14,10,11,10,11,10,12,13,9,11,14,12,13,9,14,10,12,9,11,10,11,10,11,10,11,10,11,12,13,9,14,12,13,9,14,9,10,11,12,13,9,14,10,11,10,11,10,11,10,11,10,11,10,11,10,12,13,9,11,14,10,12,13,9,11,14,10,10,10,12,13,9,11,14,10,11,10,11,10,11,10,11,10,11,10,11,10,11,0,15,16,0,0,0,16,0,0,0,15,17,18,16,19,15,17,18,16,19,17,18,16,19,17,18,16,19,15,17,18,18,16,19,18,16,18,16,18,16,19,19,18,16,19,17,19,19,18,16,19,19,19,18,19,15,17,18,16,19,17,18,16,18,16,19,18,16,19,15,17,18,16,19,17,18,16,19,18,19,20,18,16,19],"f":[null,null,null,null,null,null,null,null,null,null,null,null,[[["genericvec",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[],["ordering",4]],[[],[["storagewithcapacity",8],["genericvec",3]]],[[],["cursor",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["drain",3]],[[],["drainfilter",3]],[[]],[[],["bool",15]],[[["intoiterator",8]]],[[["intoiterator",8]]],[[]],[[]],[[["formatter",3]],["result",6]],[[["vec",3]]],[[]],[[]],[[]],[[]],[[]],[[["intoiterator",8]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],null,[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],null,[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["ordering",4],["option",4,["ordering"]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[],["rawcursor",3]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15],["fnmut",8]]],[[]],null,[[["usize",15]]],[[["usize",15]]],[[],["slicevec",6]],[[],["splice",3]],[[["usize",15]],["genericvec",3]],[[["usize",15],["genericvec",3]]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[]],[[["usize",15]]],[[],["result",4]],[[["usize",15]],["result",4]],[[["usize",15]],["result",4]],[[],["result",4]],[[],["option",4]],[[],["option",4]],[[],["result",4]],[[],["result",4]],[[["usize",15]],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]],["bool",15]],[[["usize",15]],["option",4]],[[],["typeid",3]],null,[[]],[[]],[[]],[[]],[[["usize",15]]],[[]],null,null,null,null,null,null,[[]],[[],["rawcursor",3]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["option",4]],[[]],[[],["option",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["usize",15]],[[],["usize",15]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[["usize",15]],["option",4]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["nonnull",3],["usize",15]]],[[["nonnull",3],["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["usize",15]],["bool",15]],[[["usize",15]],["bool",15]],[[["usize",15]],["bool",15]],[[["usize",15]],["bool",15]],[[["usize",15]],["bool",15]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]]],"p":[[6,"ZSVec"],[3,"GenericVec"],[6,"HeapVec"],[6,"ArrayVec"],[6,"InitArrayVec"],[6,"SliceVec"],[6,"InitSliceVec"],[6,"TypeVec"],[3,"IntoIter"],[3,"Cursor"],[3,"RawCursor"],[3,"Drain"],[3,"DrainFilter"],[3,"Splice"],[8,"Storage"],[3,"ZeroSized"],[3,"UninitSlice"],[3,"UninitBuffer"],[3,"Heap"],[8,"StorageWithCapacity"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};